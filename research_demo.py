import streamlit as st
import sys
import os

# Ajouter le chemin du projet au path
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(project_root)
sys.path.append(os.path.join(project_root, 'CrewAI-Studio'))

# Importer l'agent de recherche
from app.my_agent import ResearcherAgent

def demonstrate_research_capabilities():
    # Initialiser l'√©tat de la session si n√©cessaire
    if 'research_results' not in st.session_state:
        st.session_state.research_results = None
    if 'topic' not in st.session_state:
        st.session_state.topic = None
    if 'expand_sources' not in st.session_state:
        st.session_state.expand_sources = False
    if 'research_stage' not in st.session_state:
        st.session_state.research_stage = 'initial'

    st.title("üïµÔ∏è Agent de Recherche AI - D√©monstration Avanc√©e")
    
    # V√©rifier la pr√©sence de la cl√© API OpenAI
    if 'OPENAI_API_KEY' not in os.environ or not os.environ['OPENAI_API_KEY']:
        st.warning("‚ö†Ô∏è Cl√© API OpenAI non configur√©e. Certaines fonctionnalit√©s seront limit√©es.")
        st.info("üîë Vous pouvez obtenir une cl√© API sur https://platform.openai.com/account/api-keys")
        
        # Demander la cl√© API √† l'utilisateur
        openai_api_key = st.text_input(
            "Veuillez entrer votre cl√© API OpenAI", 
            type="password",
            help="La cl√© API est n√©cessaire pour utiliser les fonctionnalit√©s avanc√©es de recherche"
        )
        
        if openai_api_key:
            os.environ['OPENAI_API_KEY'] = openai_api_key
        else:
            st.warning("Mode d√©mo limit√© sans cl√© API OpenAI")
    
    # Section d'explication des capacit√©s
    st.markdown("""
    ## üîç Capacit√©s de l'Agent de Recherche
    
    Cet agent utilise des techniques avanc√©es de recherche et de s√©lection de sources :
    
    1. üåê **S√©lection Intelligente des Sources**
       - Filtre automatiquement les sources de qualit√©
       - √âvite les sources peu fiables (Wikipedia, blogs personnels)
       - Priorise les sources acad√©miques et professionnelles
    
    2. üî¢ **Gestion Limit√©e des Sources**
       - Maximum 15 sources par round de recherche
       - Contr√¥le de l'expansion des sources
       - Pr√©vention de la surcharge d'informations
    
    3. üß† **Crit√®res de S√©lection Avanc√©s**
       - Longueur de la description
       - Pertinence du contenu
       - Diversit√© des sources
    """)
    
    # S√©lection du sujet de recherche
    topic = st.text_input("üî¨ Entrez un sujet de recherche", 
                          value=st.session_state.topic or "",
                          placeholder="Ex: Intelligence Artificielle, Changement Climatique, ...")
    
    # Mettre √† jour le topic dans la session
    st.session_state.topic = topic
    
    if topic:
        # Cr√©er l'agent de recherche
        researcher = ResearcherAgent()
        
        # Bouton de d√©monstration
        if st.session_state.research_stage == 'initial':
            if st.button("üöÄ Lancer la Recherche D√©monstrative"):
                st.session_state.research_stage = 'preliminary_search'
                st.rerun()
        
        # √âtape de recherche pr√©liminaire
        if st.session_state.research_stage == 'preliminary_search':
            st.subheader("üîç Processus de Recherche D√©taill√©")
            
            # √âtape 1 : Recherche Pr√©liminaire
            st.markdown("#### üìã √âtape 1 : D√©couverte Pr√©liminaire des Sources")
            preliminary_results = researcher.preliminary_research(topic)
            
            # Stocker les r√©sultats dans la session
            st.session_state.research_results = preliminary_results
            
            # Afficher les d√©tails de la d√©couverte des sources
            st.write(f"**Nombre Total de Sources :** {preliminary_results['total_sources']}")
            
            # D√©monstration des crit√®res de s√©lection
            st.markdown("#### üïµÔ∏è Crit√®res de S√©lection des Sources")
            
            # Sources Web
            st.markdown("**Sources Web S√©lectionn√©es :**")
            for source in preliminary_results['sources']['web']:
                st.markdown(f"- üåê {source}")
                
            # Sources YouTube
            st.markdown("**Sources YouTube S√©lectionn√©es :**")
            for source in preliminary_results['sources']['youtube']:
                st.markdown(f"- üì∫ {source}")
            
            # Sources Acad√©miques
            st.markdown("**Sources Acad√©miques S√©lectionn√©es :**")
            for source in preliminary_results['sources']['academic']:
                st.markdown(f"- üìö {source}")
            
            # D√©monstration de l'expansion des sources
            st.markdown("#### üîÑ D√©monstration de l'Expansion des Sources")
            
            # Checkbox pour l'expansion
            expand_sources = st.checkbox("Voulez-vous plus de sources ?")
            
            if expand_sources:
                st.session_state.expand_sources = True
                st.session_state.research_stage = 'expand_sources'
                st.rerun()
            
            # Bouton de recherche finale
            if st.button("üî¨ Lancer la Recherche Approfondie"):
                st.session_state.research_stage = 'deep_research'
                st.rerun()
        
        # √âtape d'expansion des sources
        if st.session_state.research_stage == 'expand_sources':
            st.warning("‚ö†Ô∏è Expansion des sources (2√®me round)")
            
            # Initialize research_results if not exists
            if not hasattr(st.session_state, 'research_results'):
                st.session_state.research_results = {
                    'sources': {'web': [], 'youtube': [], 'academic': []},
                    'total_sources': 0
                }
            
            # Simuler l'expansion des sources
            additional_results = researcher.preliminary_research(
                topic, 
                max_total_sources=15,  # 15 sources suppl√©mentaires
                research_rounds=2
            )
            
            # Ensure additional_results has the expected structure
            if additional_results is None:
                additional_results = {
                    'sources': {'web': [], 'youtube': [], 'academic': []},
                    'total_sources': 0
                }
            
            # Fusionner les r√©sultats
            if (isinstance(additional_results, dict) and 'sources' in additional_results and 
                isinstance(st.session_state.research_results, dict) and 'sources' in st.session_state.research_results):
                for source_type in ['web', 'youtube', 'academic']:
                    if (source_type in additional_results['sources'] and 
                        source_type in st.session_state.research_results['sources']):
                        st.session_state.research_results['sources'][source_type].extend(
                            [src for src in additional_results['sources'][source_type] 
                             if src not in st.session_state.research_results['sources'][source_type]]
                        )
            
            # Mettre √† jour le nombre total de sources
            if (isinstance(additional_results, dict) and 'total_sources' in additional_results and 
                isinstance(st.session_state.research_results, dict) and 'total_sources' in st.session_state.research_results):
                st.session_state.research_results['total_sources'] += additional_results['total_sources']
            
            # R√©afficher les sources mises √† jour
            if isinstance(st.session_state.research_results, dict) and 'total_sources' in st.session_state.research_results:
                st.write(f"**Nombre Total de Sources :** {st.session_state.research_results['total_sources']}")
            
            # R√©afficher les sources
            if isinstance(st.session_state.research_results, dict) and 'sources' in st.session_state.research_results:
                st.markdown("#### üîÑ Sources Mises √† Jour")
                for source_type in ['web', 'youtube', 'academic']:
                    if source_type in st.session_state.research_results['sources']:
                        st.markdown(f"**{source_type.capitalize()} Sources :**")
                        for source in st.session_state.research_results['sources'][source_type]:
                            st.write(f"- {source}")

            # Bouton de retour √† la recherche pr√©liminaire
            if st.button("üîô Retour √† la Recherche Pr√©liminaire"):
                st.session_state.research_stage = 'preliminary_search'
                st.rerun()
            
            # Bouton de recherche finale
            if st.button("üî¨ Lancer la Recherche Approfondie"):
                st.session_state.research_stage = 'deep_research'
                st.rerun()
        
        # √âtape de recherche approfondie
        if st.session_state.research_stage == 'deep_research':
            # Effectuer la recherche compl√®te
            with st.spinner("Analyse approfondie en cours..."):
                research_result = researcher.research_topic(topic)
            
            # Afficher les r√©sultats
            st.subheader("üìÑ R√©sultats de la Recherche")
            st.write(research_result)
            
            # Bouton de r√©initialisation
            if st.button("üîÅ Nouvelle Recherche"):
                st.session_state.research_stage = 'initial'
                st.session_state.research_results = None
                st.session_state.topic = None
                st.rerun()

if __name__ == "__main__":
    demonstrate_research_capabilities()
